/* Creating Tables with Attributes, Primary and Foreign Keys*/
CREATE TABLE STUDENT (
STUDENT_ID int NOT NULL,
FNAME varchar(50) NOT NULL,
LNAME varchar(50) NOT NULL,
MAJOR varchar(50),
PRIMARY KEY (STUDENT_ID)
);

CREATE TABLE COURSES (
COURSE_ID int NOT NULL,
DEPARTMENT varchar(50) NOT NULL,
COURSE_NUMBER int NOT NULL,
COURSE_NAME varchar(50) NOT NULL,
YEAR int NOT NULL,
SEMESTER varchar(10) NOT NULL,
PRIMARY KEY (COURSE_ID)
);

CREATE TABLE ENROLLMENT (
STUDENT_ID int NOT NULL,
COURSE_ID int NOT NULL,
PRIMARY KEY (STUDENT_ID, COURSE_ID)
);

CREATE TABLE DISTRIBUTION (
DISTRIBUTION_ID int NOT NULL,
COURSE_ID int NOT NULL,
CATEGORY varchar(50) NOT NULL,
DIST_PERCENT int NOT NULL,
PRIMARY KEY (DISTRIBUTION_ID)
);

CREATE TABLE ASSIGNMENT (
ASSIGNMENT_ID int NOT NULL,
DISTRIBUTION_ID int NOT NULL,
INSTANCE int NOT NULL,
POINTS_POSSIBLE int NOT NULL,
PRIMARY KEY (ASSIGN_ID)
);

CREATE TABLE STUDENT_GRADES (
STUDENT_ID int NOT NULL,
ASSIGNMENT_ID int NOT NULL,
GRADE_POINT int DEFAULT 0 NOT NULL,
PRIMARY KEY (STUDENT_ID, ASSIGN_ID)
);

/*Inserting Values into Tables*/
INSERT INTO STUDENT(STUDENT_ID, FNAME, LNAME, MAJOR) VALUES
(2494, 'Kyra', 'Swift', 'Computer Science'),
(4321, 'Justin', 'Stewart', 'Computer Science'), 
(1000, 'Derek', 'Major', 'Computer Science'),
(6666, 'Harley', 'Quinn', 'Psychology');

INSERT INTO COURSES (COURSE_ID, DEPARTMENT, COURSE_NUMBER, COURSE_NAME, SEMESTER, YEAR) VALUES
(1, 'Computer Science', 539, 'DATABASE', 'Spring', 2020), 
(2, 'Computer Science', 798, 'Intro to Cybersecurity II', 'Spring', 2020), 
(3, 'English', 224, 'Technical Writingâ€™', 'Spring', 2020);

INSERT INTO ENROLLMENT (STUDENT_ID, COURSE_ID) VALUES
(2494, 1), 
(2494, 2), 
(4321, 1), 
(4321, 2), 
(4321, 3), 
(1000, 2), 
(1000, 3),
(6666, 2);

INSERT INTO DISTRIBUTION (DISTRIBUTION_ID, COURSE_ID, CATEGORY, DIST_PERCENT) VALUES
(1, 2, 'Participation', 10),
(2, 2, 'Homework', 20),
(3, 2, 'Test', 50),
(4, 2, 'Project', 20);

INSERT INTO ASSIGNMENT (ASSIGN_ID, DISTRIBUTION_ID, INSTANCE, POINTS_POSSIBLE) VALUES
(1, 1, 1, 100),
(2, 2, 1, 100),
(3, 2, 2, 100),
(4, 3, 1, 100),
(5, 4, 2, 100);

INSERT INTO STUDENT_GRADES (STUDENT_ID, ASSIGN_ID, GRADE) VALUES
(2494, 1, 92), 
(2494, 2, 83), 
(2494, 3, 85), 
(2494, 4, 91), 
(2494, 5, 77), 
(4321, 1, 79), 
(4321, 2, 85),
(4321, 3, 83), 
(4321, 4, 87), 
(4321, 5, 78), 
(1000, 1, 78), 
(1000, 2, 63), 
(1000, 3, 80), 
(1000, 4, 79), 
(1000, 5, 69),
(6666, 1, 30),
(6666, 2, 25),
(6666, 3, 60),
(6666, 4, 58),
(6666, 5, 67);

/* Display Tables */
SELECT * FROM STUDENT;
SELECT * FROM ENROLLMENT;
SELECT * FROM COURSES;
SELECT * FROM DISTRIBUTION;
SELECT * FROM ASSIGNMENT;
SELECT * FROM GRADEBOOK;

/* Compute the Average/Highest/Lowest Score*/
SELECT AVG(GRADE_POINT) FROM STUDENT_GRADES WHERE ASSIGN_ID = '3';
SELECT MAX(GRADE_POINT) FROM STUDENT_GRADES WHERE ASSIGN_ID = '3';
SELECT MIN(GRADE_POINT) FROM STUDENT_GRADES WHERE ASSIGN_ID = '3';

/* Listing all Students in a course */
SELECT FNAME, LNAME FROM STUDENT
WHERE STUDENT_ID IN ( SELECT STUDENT_ID FROM ENROLLMENT 
WHERE COURSE_ID = (SELECT COURSE_ID FROM COURSES
WHERE COURSE_NAME = "DATABASE"));

/* Listing all students in a course and their respective scores on Assignments */
SELECT S.STUDENT_ID, S.FNAME, S.LNAME, E.COURSE_ID, G.ASSIGN_ID, G.STUDENT_GRADE
FROM STUDENT S, ENROLLMENT E, GRADEBOOK G
WHERE S.STUDENT_ID = G.STUDENT_ID AND G.STUDENT_ID = E.STUDENT_ID AND E.COURSE_ID = 2;

/* Adding a new Assignment to a Course */
INSERT INTO ASSIGNMENT (ASSIGN_ID, DISTRIBUTION_ID, INSTANCE, POINTS_POSSIBLE) VALUES (6, 3, 2, 100);

/* Changing percentage of categories for a given course */
UPDATE DISTRIBUTION SET DIST_PERCENT = 15 WHERE CATEGORY = 'Project';
UPDATE DISTRIBUTION SET DIST_PERCENT = 15 WHERE CATEGORY = 'Participation';

/* Adding 2 points to the score of each student on a given Assignment */
UPDATE STUDENT_GRADES SET GRADE = GRADE + 2 WHERE ASSIGN_ID = 3;

/* Adding 2 points to only students whose last name contains a 'Q' */
UPDATE STUDENT_GRADES
SET GRADE = GRADE + 2
WHERE STUDENT_GRADES.STUDENT_ID = (SELECT STUDENT_ID FROM STUDENT WHERE STUDENT_GRADES.STUDENT_ID = STUDENT.STUDENT_ID AND STUDENT.LNAME LIKE '%Q%');

/* Computing grades for a student */
SELECT SUM((G.GRADE) * (D.DIST_PERCENT/C.COUNTER)/POINTS_POSSIBLE) AS FINAL_GRADE FROM STUDENT_GRADES G
LEFT JOIN ASSIGNMENT A ON G.ASSIGN_ID = A.ASSIGN_ID
JOIN DISTRIBUTION D ON D.DISTRIBUTION_ID = A.DISTRIBUTION_ID
JOIN (SELECT D.DISTRIBUTION_ID,COUNT(*) AS COUNTER FROM STUDENT_GRADES G
     LEFT JOIN ASSIGNMENT A ON G.ASSIGN_ID = A.ASSIGN_ID
     JOIN DISTRIBUTION D ON D.DISTRIBUTION_ID = A.DISTRIBUTION_ID
     WHERE COURSE_ID = 2 AND STUDENT_ID = 2494 GROUP BY D.DISTRIBUTION_ID)
     C ON C.DISTRIBUTION_ID = D.DISTRIBUTION_ID WHERE COURSE_ID = 2 AND STUDENT_ID = 2494;

/* Computing grades for a student - lowest score for a given is dropped */
SELECT SUM((G.GRADE)*(D.DIST_PERCENT/C.COUNTER)/POINTS_POSSIBLE) AS FINAL_GRADE
FROM STUDENT_GRADES G
LEFT JOIN ASSIGNMENT A ON G.ASSIGN_ID = A.ASSIGN_ID
JOIN DISTRIBUTION D ON D.DISTRIBUTION_ID = A.DISTRIBUTION_ID
JOIN (SELECT D.DISTRIBUTION_ID, COUNT(*) AS COUNTER FROM STUDENT_GRADES G
     LEFT JOIN ASSIGNMENT A ON G.ASSIGN_ID = A.ASSIGN_ID
     JOIN DISTRIBUTION D ON D.DISTRIBUTION_ID = A.DISTRIBUTION_ID
     WHERE COURSE_ID = 2 ANDSTUDENT_ID = 6666 GROUP BY D.DISTRIBUTION_ID)
     C ON C.DISTRIBUTION_ID = D.DISTRIBUTION_ID
JOIN (SELECT D.DISTRIBUTION_ID, COUNT(*) AS COUNTER FROM STUDENT_GRADES G
     LEFT JOIN ASSIGNMENT A ON G.ASSIGN_ID = A.ASSIGN_ID
     JOIN DISTRIBUTION D ON D.DISTRIBUTION_ID = A.DISTRIBUTION_ID
     WHERE COURSE_ID = 2 AND STUDENT_ID = 6666 GROUP BY D.DISTRIBUTION_ID)
     Z ON Z.DISTRIBUTION_ID = D.DISTRIBUTION_ID WHERE COURSE_ID = 2 AND STUDENT_ID = 6666;
